{"version":3,"sources":["App.tsx","index.tsx"],"names":["goods","App","state","selectedGood","handleGoodClick","goodName","setState","handleClearButtonClick","createMassivegoodItements","map","goodItem","isGoodSelected","className","classNames","type","onClick","this","length","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oQAKaA,EAAQ,CACnB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOWC,EAAb,4MACEC,MAAyB,CACvBC,aAAc,OAFlB,EAKEC,gBAAkB,SAACC,GACM,EAAKH,MAAMC,eAAiBE,EAGjD,EAAKC,SAAS,CAAEH,aAAc,KAE9B,EAAKG,SAAS,CAAEH,aAAcE,KAXpC,EAeEE,uBAAyB,WACvB,EAAKD,SAAS,CAAEH,aAAc,MAhBlC,EAmBEK,0BAA4B,WAC1B,OACER,EAAMS,KAAI,SAACC,GACT,IAAMC,EAAiB,EAAKT,MAAMC,eAAiBO,EAEnD,OACE,qBACE,UAAQ,OAERE,UACEC,IAAW,CAAE,+BAAgCF,IAJjD,UAOE,6BACE,wBACE,UAASA,EAAiB,eAAiB,YAC3CG,KAAK,SACLF,UAAWC,IAAW,SAAU,CAAE,UAAWF,IAC7CI,QAAS,kBAAM,EAAKX,gBAAgBM,IAJtC,SAMGC,EAAiB,IAAM,QAI5B,oBAAI,UAAQ,YAAYC,UAAU,eAAlC,SACGF,MAjBEA,OA3BjB,4CAoDE,WACE,OACE,uBAAME,UAAU,oBAAhB,UACGI,KAAKd,MAAMC,aAAac,OAErB,qBAAIL,UAAU,sCAAd,oBACMI,KAAKd,MAAMC,aADjB,gBAIE,wBACE,UAAQ,cACRW,KAAK,SACLF,UAAU,cACVG,QAASC,KAAKT,4BAIlB,oBAAIK,UAAU,QAAd,+BACJ,uBAAOA,UAAU,QAAjB,SACE,gCACGI,KAAKR,uCAxElB,GAAyBU,IAAMC,WCnB/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5612fd2a.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGood: string;\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    selectedGood: 'Jam',\n  };\n\n  handleGoodClick = (goodName: string) => {\n    const isRepeatButton = this.state.selectedGood === goodName;\n\n    if (isRepeatButton) {\n      this.setState({ selectedGood: '' });\n    } else {\n      this.setState({ selectedGood: goodName });\n    }\n  };\n\n  handleClearButtonClick = () => {\n    this.setState({ selectedGood: '' });\n  };\n\n  createMassivegoodItements = () => {\n    return (\n      goods.map((goodItem) => {\n        const isGoodSelected = this.state.selectedGood === goodItem;\n\n        return (\n          <tr\n            data-cy=\"Good\"\n            key={goodItem}\n            className={\n              classNames({ 'has-background-success-light': isGoodSelected })\n            }\n          >\n            <td>\n              <button\n                data-cy={isGoodSelected ? 'RemoveButton' : 'AddButton'}\n                type=\"button\"\n                className={classNames('button', { 'is-info': isGoodSelected })}\n                onClick={() => this.handleGoodClick(goodItem)}\n              >\n                {isGoodSelected ? '-' : '+'}\n              </button>\n            </td>\n\n            <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n              {goodItem}\n            </td>\n          </tr>\n        );\n      })\n    );\n  };\n\n  render() {\n    return (\n      <main className=\"section container\">\n        {this.state.selectedGood.length\n          ? (\n            <h1 className=\"title is-flex is-align-items-center\">\n              {`${this.state.selectedGood} is selected`}\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"ClearButton\"\n                type=\"button\"\n                className=\"delete ml-3\"\n                onClick={this.handleClearButtonClick}\n              />\n            </h1>\n          )\n          : <h1 className=\"title\">No goods selected</h1>}\n        <table className=\"table\">\n          <tbody>\n            {this.createMassivegoodItements()}\n          </tbody>\n        </table>\n      </main>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}